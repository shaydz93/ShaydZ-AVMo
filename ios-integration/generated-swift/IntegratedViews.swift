//
//  IntegratedViews.swift
//  ShaydZ-AVMo
//
//  Generated by iOS Integration Tool
//

import SwiftUI

// MARK: - Main App View with Integration

struct IntegratedAppView: View {
    @StateObject private var authVM = AuthenticationViewModel()
    @StateObject private var appCatalogVM = AppCatalogViewModel()
    @StateObject private var vmVM = VirtualMachineViewModel()
    
    var body: some View {
        Group {
            if authVM.isAuthenticated {
                TabView {
                    AppCatalogIntegratedView()
                        .tabItem {
                            Image(systemName: "square.grid.3x3")
                            Text("Apps")
                        }
                        .environmentObject(appCatalogVM)
                    
                    VirtualMachineIntegratedView()
                        .tabItem {
                            Image(systemName: "desktopcomputer")
                            Text("VMs")
                        }
                        .environmentObject(vmVM)
                    
                    ProfileView()
                        .tabItem {
                            Image(systemName: "person.circle")
                            Text("Profile")
                        }
                        .environmentObject(authVM)
                }
            } else {
                LoginIntegratedView()
                    .environmentObject(authVM)
            }
        }
        .alert("Error", isPresented: .constant(authVM.errorMessage != nil)) {
            Button("OK") {
                authVM.errorMessage = nil
            }
        } message: {
            if let error = authVM.errorMessage {
                Text(error)
            }
        }
    }
}

// MARK: - Login View with Integration

struct LoginIntegratedView: View {
    @EnvironmentObject var authVM: AuthenticationViewModel
    @State private var username = "demo"
    @State private var password = "password"
    
    var body: some View {
        VStack(spacing: 20) {
            VStack(spacing: 10) {
                Image(systemName: "cube.box.fill")
                    .font(.system(size: 80))
                    .foregroundColor(.blue)
                
                Text("ShaydZ AVMo")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                
                Text("Virtual Mobile Infrastructure")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            VStack(spacing: 15) {
                TextField("Username", text: $username)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .autocapitalization(.none)
                
                SecureField("Password", text: $password)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                
                Button(action: {
                    authVM.login(username: username, password: password)
                }) {
                    HStack {
                        if authVM.isLoading {
                            ProgressView()
                                .scaleEffect(0.8)
                        }
                        Text("Login")
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(10)
                }
                .disabled(authVM.isLoading)
            }
            
            Spacer()
        }
        .padding()
    }
}

// MARK: - App Catalog View with Integration

struct AppCatalogIntegratedView: View {
    @EnvironmentObject var appCatalogVM: AppCatalogViewModel
    
    var body: some View {
        NavigationView {
            VStack {
                SearchBar(text: $appCatalogVM.searchText)
                
                if appCatalogVM.isLoading {
                    ProgressView("Loading apps...")
                        .frame(maxWidth: .infinity, maxHeight: .infinity)
                } else {
                    List(appCatalogVM.filteredApps) { app in
                        AppRowView(app: app)
                    }
                }
            }
            .navigationTitle("App Catalog")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Refresh") {
                        appCatalogVM.loadApps()
                    }
                }
            }
        }
        .onAppear {
            appCatalogVM.loadApps()
        }
        .alert("Error", isPresented: .constant(appCatalogVM.errorMessage != nil)) {
            Button("OK") {
                appCatalogVM.errorMessage = nil
            }
        } message: {
            if let error = appCatalogVM.errorMessage {
                Text(error)
            }
        }
    }
}

// MARK: - Virtual Machine View with Integration

struct VirtualMachineIntegratedView: View {
    @EnvironmentObject var vmVM: VirtualMachineViewModel
    
    var body: some View {
        NavigationView {
            VStack {
                if vmVM.isLoading {
                    ProgressView("Loading virtual machines...")
                        .frame(maxWidth: .infinity, maxHeight: .infinity)
                } else {
                    List(vmVM.virtualMachines) { vm in
                        VMRowView(vm: vm, vmVM: vmVM)
                    }
                }
            }
            .navigationTitle("Virtual Machines")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Refresh") {
                        vmVM.loadVirtualMachines()
                    }
                }
            }
        }
        .onAppear {
            vmVM.loadVirtualMachines()
        }
        .alert("Error", isPresented: .constant(vmVM.errorMessage != nil)) {
            Button("OK") {
                vmVM.errorMessage = nil
            }
        } message: {
            if let error = vmVM.errorMessage {
                Text(error)
            }
        }
    }
}

// MARK: - Supporting Views

struct SearchBar: View {
    @Binding var text: String
    
    var body: some View {
        HStack {
            Image(systemName: "magnifyingglass")
                .foregroundColor(.secondary)
            
            TextField("Search apps...", text: $text)
                .textFieldStyle(PlainTextFieldStyle())
            
            if !text.isEmpty {
                Button("Clear") {
                    text = ""
                }
                .foregroundColor(.secondary)
            }
        }
        .padding(8)
        .background(Color(.systemGray6))
        .cornerRadius(10)
        .padding(.horizontal)
    }
}

struct AppRowView: View {
    let app: App
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                Text(app.name)
                    .font(.headline)
                
                Text(app.category)
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Text(app.description)
                    .font(.caption)
                    .lineLimit(2)
            }
            
            Spacer()
            
            VStack {
                Text(app.version)
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                if app.isInstalled {
                    Image(systemName: "checkmark.circle.fill")
                        .foregroundColor(.green)
                }
            }
        }
        .padding(.vertical, 4)
    }
}

struct VMRowView: View {
    let vm: VirtualMachine
    @ObservedObject var vmVM: VirtualMachineViewModel
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                Text(vm.name)
                    .font(.headline)
                
                Text("Status: \(vm.status)")
                    .font(.caption)
                    .foregroundColor(vm.status == "running" ? .green : .secondary)
                
                Text("\(vm.cpuCores) CPU • \(vm.ramMB)MB RAM • \(vm.diskGB)GB")
                    .font(.caption2)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            HStack {
                if vmVM.actionInProgress == vm.id {
                    ProgressView()
                        .scaleEffect(0.8)
                } else {
                    if vm.status == "stopped" {
                        Button("Start") {
                            vmVM.startVM(vm)
                        }
                        .buttonStyle(.bordered)
                        .tint(.green)
                    } else {
                        Button("Stop") {
                            vmVM.stopVM(vm)
                        }
                        .buttonStyle(.bordered)
                        .tint(.red)
                    }
                }
            }
        }
        .padding(.vertical, 4)
    }
}

struct ProfileView: View {
    @EnvironmentObject var authVM: AuthenticationViewModel
    
    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                if let user = authVM.currentUser {
                    VStack(spacing: 10) {
                        Image(systemName: "person.circle.fill")
                            .font(.system(size: 80))
                            .foregroundColor(.blue)
                        
                        Text(user.username)
                            .font(.title2)
                            .fontWeight(.semibold)
                        
                        if let email = user.email {
                            Text(email)
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    }
                }
                
                Spacer()
                
                Button("Logout") {
                    authVM.logout()
                }
                .buttonStyle(.bordered)
                .tint(.red)
            }
            .padding()
            .navigationTitle("Profile")
        }
    }
}