import SwiftUI

struct VulnerabilityScannerView: View {
    @EnvironmentObject var securityToolkit: SecurityToolkitViewModel
    @State private var selectedDevice: NetworkDevice?
    @State private var showingVulnerabilityDetails = false
    @State private var selectedVulnerability: Vulnerability?
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                Text("Vulnerability Scanner")
                    .font(.largeTitle)
                    .bold()
                
                // Device Selection
                VStack(alignment: .leading) {
                    Text("Select Target Device")
                        .font(.headline)
                    
                    Text("Choose a device to scan for vulnerabilities")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    if securityToolkit.discoveredDevices.isEmpty {
                        VStack {
                            Text("No devices discovered")
                                .font(.body)
                                .padding()
                            
                            Button(action: {
                                securityToolkit.startNetworkScan()
                            }) {
                                Text("Run Network Scan")
                                    .frame(maxWidth: .infinity)
                                    .padding()
                                    .background(Color.blue)
                                    .foregroundColor(.white)
                                    .cornerRadius(10)
                            }
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(10)
                    } else {
                        ScrollView(.horizontal, showsIndicators: false) {
                            HStack(spacing: 15) {
                                ForEach(securityToolkit.discoveredDevices) { device in
                                    DeviceCard(device: device, isSelected: selectedDevice?.id == device.id)
                                        .onTapGesture {
                                            selectedDevice = device
                                        }
                                }
                            }
                            .padding(.vertical)
                        }
                    }
                }
                .padding(.bottom)
                
                // Vulnerability Scanning
                VStack(alignment: .leading) {
                    Text("Vulnerability Assessment")
                        .font(.headline)
                    
                    if let device = selectedDevice {
                        Text("Scan \(device.hostName ?? device.ipAddress) for security vulnerabilities")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                        
                        Button(action: {
                            securityToolkit.scanForVulnerabilities(device: device)
                        }) {
                            Text(securityToolkit.vulnerabilityScanInProgress ? "Scanning..." : "Start Vulnerability Scan")
                                .frame(maxWidth: .infinity)
                                .padding()
                                .background(Color.orange)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                        .disabled(securityToolkit.vulnerabilityScanInProgress)
                        
                        // Results Section
                        if !device.vulnerabilities.isEmpty {
                            VStack(alignment: .leading, spacing: 15) {
                                Text("Vulnerabilities Found: \(device.vulnerabilities.count)")
                                    .font(.headline)
                                    .padding(.top)
                                
                                ForEach(device.vulnerabilities) { vulnerability in
                                    VulnerabilityCard(vulnerability: vulnerability)
                                        .onTapGesture {
                                            selectedVulnerability = vulnerability
                                            showingVulnerabilityDetails = true
                                        }
                                }
                            }
                            .padding(.top)
                        }
                    } else {
                        Text("Select a device to scan")
                            .font(.body)
                            .padding()
                            .frame(maxWidth: .infinity)
                            .background(Color(.systemGray6))
                            .cornerRadius(10)
                    }
                }
            }
            .padding()
        }
        .sheet(isPresented: $showingVulnerabilityDetails) {
            if let vulnerability = selectedVulnerability {
                VulnerabilityDetailView(vulnerability: vulnerability)
            }
        }
    }
}

// MARK: - Supporting Views

struct DeviceCard: View {
    let device: NetworkDevice
    let isSelected: Bool
    
    var body: some View {
        VStack(alignment: .leading) {
            Text(device.hostName ?? "Unknown Device")
                .font(.headline)
                .lineLimit(1)
            
            Text(device.ipAddress)
                .font(.subheadline)
            
            if let macAddress = device.macAddress {
                Text(macAddress)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
        .padding()
        .frame(width: 200)
        .background(isSelected ? Color.blue.opacity(0.2) : Color(.systemGray6))
        .cornerRadius(10)
        .overlay(
            RoundedRectangle(cornerRadius: 10)
                .stroke(isSelected ? Color.blue : Color.clear, lineWidth: 2)
        )
    }
}

struct VulnerabilityCard: View {
    let vulnerability: Vulnerability
    
    var body: some View {
        HStack {
            Circle()
                .fill(getSeverityColor(vulnerability.severity))
                .frame(width: 12, height: 12)
            
            VStack(alignment: .leading) {
                Text(vulnerability.name)
                    .font(.headline)
                
                Text(vulnerability.severity.rawValue)
                    .font(.caption)
                    .padding(4)
                    .background(getSeverityColor(vulnerability.severity).opacity(0.2))
                    .cornerRadius(4)
                
                Text(vulnerability.description)
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .lineLimit(2)
            }
            
            Spacer()
            
            Image(systemName: "chevron.right")
                .foregroundColor(.secondary)
        }
        .padding()
        .background(Color(.systemGray6))
        .cornerRadius(10)
    }
    
    func getSeverityColor(_ severity: Vulnerability.Severity) -> Color {
        switch severity {
        case .critical:
            return Color.red
        case .high:
            return Color.orange
        case .medium:
            return Color.yellow
        case .low:
            return Color.blue
        case .info:
            return Color.gray
        }
    }
}

struct VulnerabilityDetailView: View {
    let vulnerability: Vulnerability
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    // Severity indicator
                    HStack {
                        Text(vulnerability.severity.rawValue)
                            .font(.headline)
                            .padding(8)
                            .background(getSeverityColor(vulnerability.severity).opacity(0.2))
                            .cornerRadius(8)
                        
                        Spacer()
                        
                        if let cveId = vulnerability.cveId {
                            Text(cveId)
                                .font(.headline)
                                .foregroundColor(.blue)
                        }
                    }
                    
                    // Description
                    VStack(alignment: .leading) {
                        Text("Description")
                            .font(.headline)
                        
                        Text(vulnerability.description)
                            .padding(.top, 1)
                    }
                    
                    // Remediation
                    VStack(alignment: .leading) {
                        Text("Remediation")
                            .font(.headline)
                        
                        Text(vulnerability.remediation)
                            .padding(.top, 1)
                    }
                    
                    // References and resources (simulated)
                    VStack(alignment: .leading) {
                        Text("Additional Resources")
                            .font(.headline)
                        
                        if let cveId = vulnerability.cveId {
                            Link("NIST \(cveId) Database Entry", destination: URL(string: "https://nvd.nist.gov/vuln/detail/\(cveId)")!)
                                .padding(.top, 1)
                        }
                        
                        Link("OWASP Security Guidelines", destination: URL(string: "https://owasp.org/www-project-top-ten/")!)
                            .padding(.top, 1)
                    }
                    
                    Spacer()
                }
                .padding()
            }
            .navigationTitle(vulnerability.name)
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Close") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
            }
        }
    }
    
    func getSeverityColor(_ severity: Vulnerability.Severity) -> Color {
        switch severity {
        case .critical:
            return Color.red
        case .high:
            return Color.orange
        case .medium:
            return Color.yellow
        case .low:
            return Color.blue
        case .info:
            return Color.gray
        }
    }
}

struct VulnerabilityScannerView_Previews: PreviewProvider {
    static var previews: some View {
        VulnerabilityScannerView()
            .environmentObject(SecurityToolkitViewModel())
    }
}
